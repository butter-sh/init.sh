#!/usr/bin/env bash

# init.sh - Comprehensive arty.sh project initialization system with asciinema support
# Version: 1.1.0
# Generated by hammer.sh

set -euo pipefail

# Configuration
INIT_VERSION="1.1.0"
ARTY_HOME="${ARTY_HOME:-$PWD/.arty}"
CONFIG_FILE="${CONFIG_FILE:-arty.yml}"
DEMOS_DIR="${DEMOS_DIR:-demos}"

# Colors for output - only use colors if output is to a terminal or if FORCE_COLOR is set
if [[ -z "$FORCE_COLOR" ]]; then
		if [[ "$FORCE_COLOR" = "1" ]]; then
			export RED='\033[0;31m'
			export GREEN='\033[0;32m'
			export YELLOW='\033[1;33m'
			export BLUE='\033[0;34m'
			export CYAN='\033[0;36m'
			export MAGENTA='\033[0;35m'
			export BOLD='\033[1m'
			export NC='\033[0m'

		else
			export RED=''
			export GREEN=''
			export YELLOW=''
			export BLUE=''
			export CYAN=''
			export MAGENTA=''
			export BOLD=''
			export NC=''
		fi
elif [[ -t 1 ]] && [[ -t 2 ]]; then
		export RED='\033[0;31m'
		export GREEN='\033[0;32m'
		export YELLOW='\033[1;33m'
		export BLUE='\033[0;34m'
		export CYAN='\033[0;36m'
		export MAGENTA='\033[0;35m'
		export BOLD='\033[1m'
		export NC='\033[0m'
else
    export RED=''
    export GREEN=''
    export YELLOW=''
    export BLUE=''
    export CYAN=''
		export MAGENTA=''
		export BOLD=''
		export NC=''
fi

# Emoji support
EMOJI_CHECK="‚úì"
EMOJI_CROSS="‚úó"
EMOJI_ROCKET="üöÄ"
EMOJI_HAMMER="üî®"
EMOJI_PACKAGE="üì¶"
EMOJI_FOLDER="üìÅ"
EMOJI_FILE="üìÑ"
EMOJI_INFO="‚Ñπ"
EMOJI_WARN="‚ö†"
EMOJI_CAMERA="üé¨"

# Logging functions
log_info() {
    echo -e "${BLUE}${EMOJI_INFO}${NC} $1"
}

log_success() {
    echo -e "${GREEN}${EMOJI_CHECK}${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}${EMOJI_WARN}${NC} $1"
}

log_error() {
    echo -e "${RED}${EMOJI_CROSS}${NC} $1" >&2
}

log_header() {
    echo -e "\n${BOLD}${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BOLD}${CYAN}  $1${NC}"
    echo -e "${BOLD}${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
}

# Banner
show_banner() {
    cat << 'EOF'

    ‚ï¶‚îå‚îê‚îå‚î¨‚îå‚î¨‚îê  ‚îå‚îÄ‚îê‚î¨ ‚î¨
    ‚ïë‚îÇ‚îÇ‚îÇ‚îÇ ‚îÇ   ‚îî‚îÄ‚îê‚îú‚îÄ‚î§
    ‚ï©‚îò‚îî‚îò‚î¥ ‚î¥   ‚îî‚îÄ‚îò‚î¥ ‚î¥
    
    Project Initialization System
    Part of the butter.sh ecosystem
    Now with asciinema support! üé¨
    
EOF
}

# Show usage
show_usage() {
    cat << EOF
${BOLD}init.sh${NC} - Comprehensive arty.sh Project Initialization System

${BOLD}USAGE:${NC}
    init.sh [options] [project-name]
    
${BOLD}ASCIINEMA COMMANDS:${NC}
    init.sh rec [name]           Start recording (default: demo.cast)
    init.sh play <file>          Play back recording
    init.sh upload <file>        Upload to asciinema.org
    init.sh stop                 Show how to stop recording
    init.sh list                 List all .cast files in current/demos dir

${BOLD}PROJECT OPTIONS:${NC}
    ${GREEN}-t, --template${NC} <n>     Use a specific template (basic|web|cli|lib)
    ${GREEN}-d, --dir${NC} <path>          Target directory (default: current)
    ${GREEN}--skip-git${NC}                Skip git initialization
    ${GREEN}--skip-deps${NC}               Skip dependency installation
    ${GREEN}--interactive${NC}             Interactive mode with prompts
    ${GREEN}-v, --verbose${NC}             Verbose output
    ${GREEN}-h, --help${NC}                Show this help message
    ${GREEN}--version${NC}                 Show version information

${BOLD}TEMPLATES:${NC}
    ${CYAN}basic${NC}       Minimal project structure
    ${CYAN}cli${NC}         Command-line tool template
    ${CYAN}lib${NC}         Library/module template
    ${CYAN}web${NC}         Web service template

${BOLD}ASCIINEMA EXAMPLES:${NC}
    ${YELLOW}# Record a demo${NC}
    init.sh rec my-demo

    ${YELLOW}# Play it back${NC}
    init.sh play my-demo.cast

    ${YELLOW}# Upload to asciinema.org${NC}
    init.sh upload my-demo.cast

    ${YELLOW}# List all recordings${NC}
    init.sh list

${BOLD}PROJECT EXAMPLES:${NC}
    ${YELLOW}# Initialize with default template${NC}
    init.sh my-project

    ${YELLOW}# Interactive mode${NC}
    init.sh --interactive

    ${YELLOW}# CLI tool template${NC}
    init.sh --template cli my-awesome-cli

    ${YELLOW}# Library template in specific directory${NC}
    init.sh -t lib -d ~/projects my-library

${BOLD}INTEGRATION:${NC}
    Works seamlessly with:
    ‚Ä¢ ${CYAN}arty.sh${NC} - Library manager
    ‚Ä¢ ${CYAN}leaf.sh${NC} - Documentation generator  
    ‚Ä¢ ${CYAN}hammer.sh${NC} - Project generator
    ‚Ä¢ ${CYAN}asciinema${NC} - Terminal recording

${BOLD}VERSION:${NC}
    init.sh v${INIT_VERSION}

${BOLD}MORE INFO:${NC}
    GitHub: https://github.com/butter-sh/init.sh
    asciinema: https://asciinema.org

EOF
}

# Show version
show_version() {
    cat << EOF
${BOLD}${CYAN}init.sh${NC} version ${GREEN}${INIT_VERSION}${NC}

Part of the ${BOLD}${CYAN}butter.sh${NC} ecosystem

${BOLD}Features:${NC}
  ‚Ä¢ Multiple project templates
  ‚Ä¢ Interactive initialization
  ‚Ä¢ Git integration
  ‚Ä¢ Dependency management
  ‚Ä¢ arty.yml generation
  ‚Ä¢ ${EMOJI_CAMERA} asciinema demo recording

${BOLD}License:${NC} MIT
${BOLD}Website:${NC} https://init.sh
EOF
}

# Check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    if ! command_exists "yq"; then
        missing+=("yq")
    fi
    
    if ! command_exists "git"; then
        missing+=("git")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        log_warn "Missing dependencies: ${missing[*]}"
        log_info "Install yq: https://github.com/mikefarah/yq#install"
        return 1
    fi
    
    return 0
}

# =====================================================
# ASCIINEMA FUNCTIONS
# =====================================================

ascii_check() {
    if ! command_exists "asciinema"; then
        log_error "asciinema not installed"
        echo ""
        log_info "Install asciinema:"
        echo "  macOS:    brew install asciinema"
        echo "  Ubuntu:   sudo apt-get install asciinema"
        echo "  Fedora:   sudo dnf install asciinema"
        echo "  pip:      pip3 install asciinema"
        echo ""
        log_info "Docs: https://docs.asciinema.org/getting-started/"
        return 1
    fi
    return 0
}

ascii_record() {
    local demo_name="${1:-demo}"
    local cast_file="${demo_name}.cast"
    
    # Remove .cast extension if already provided
    if [[ "$demo_name" == *.cast ]]; then
        cast_file="$demo_name"
        demo_name="${demo_name%.cast}"
    fi
    
    ascii_check || return 1
    
    # Create demos directory if it doesn't exist
    if [[ ! -d "$DEMOS_DIR" ]]; then
        mkdir -p "$DEMOS_DIR"
        log_info "Created $DEMOS_DIR directory"
    fi
    
    local full_path="$DEMOS_DIR/$cast_file"
    
    log_header "${EMOJI_CAMERA} Starting asciinema recording"
    
    cat << EOF
${BOLD}Recording:${NC} $full_path
${BOLD}Title:${NC} $demo_name

${YELLOW}Tips for great demos:${NC}
  ‚Ä¢ Clear your terminal first (Ctrl+L)
  ‚Ä¢ Set a clean prompt
  ‚Ä¢ Type commands slowly
  ‚Ä¢ Add pauses with 'sleep 2' between commands
  ‚Ä¢ Use colors for better visibility

${BOLD}To stop recording:${NC}
  ‚Ä¢ Press ${GREEN}Ctrl+D${NC} or type ${GREEN}exit${NC}

${CYAN}Starting in 3 seconds...${NC}
EOF
    
    sleep 3
    
    asciinema rec "$full_path" \
        --overwrite \
        --title "$demo_name" \
        --cols=120 \
        --rows=30
    
    if [[ -f "$full_path" ]]; then
        log_success "Recording saved: $full_path"
        echo ""
        log_info "Next steps:"
        echo "  ${GREEN}init.sh play $cast_file${NC}      # Play it back"
        echo "  ${GREEN}init.sh upload $cast_file${NC}    # Upload to asciinema.org"
        echo ""
    fi
}

ascii_play() {
    local cast_file="$1"
    
    if [[ -z "$cast_file" ]]; then
        log_error "Usage: init.sh play <cast-file>"
        return 1
    fi
    
    ascii_check || return 1
    
    # Check in current directory first
    if [[ ! -f "$cast_file" ]]; then
        # Try demos directory
        if [[ -f "$DEMOS_DIR/$cast_file" ]]; then
            cast_file="$DEMOS_DIR/$cast_file"
        else
            log_error "File not found: $cast_file"
            log_info "Try: init.sh list"
            return 1
        fi
    fi
    
    log_info "Playing: $cast_file"
    asciinema play "$cast_file"
}

ascii_upload() {
    local cast_file="$1"
    
    if [[ -z "$cast_file" ]]; then
        log_error "Usage: init.sh upload <cast-file>"
        return 1
    fi
    
    ascii_check || return 1
    
    # Check in current directory first
    if [[ ! -f "$cast_file" ]]; then
        # Try demos directory
        if [[ -f "$DEMOS_DIR/$cast_file" ]]; then
            cast_file="$DEMOS_DIR/$cast_file"
        else
            log_error "File not found: $cast_file"
            log_info "Try: init.sh list"
            return 1
        fi
    fi
    
    log_header "${EMOJI_CAMERA} Uploading to asciinema.org"
    log_info "Uploading: $cast_file"
    
    asciinema upload "$cast_file"
    
    log_success "Upload complete!"
    echo ""
    log_info "Copy the URL and add it to your README.md:"
    echo ""
    cat << 'EOF'
  <a href="https://asciinema.org/a/YOUR-ID" target="_blank">
    <img src="https://asciinema.org/a/YOUR-ID.svg" width="600"/>
  </a>
EOF
    echo ""
}

ascii_stop() {
    log_header "How to Stop Recording"
    cat << EOF
To stop an asciinema recording:

  ${GREEN}1. Press Ctrl+D${NC}
     or
  ${GREEN}2. Type 'exit' and press Enter${NC}

The recording will be saved automatically.

${BOLD}After recording:${NC}
  ‚Ä¢ Review: ${CYAN}init.sh play your-demo.cast${NC}
  ‚Ä¢ Upload: ${CYAN}init.sh upload your-demo.cast${NC}
  ‚Ä¢ Re-record: ${CYAN}init.sh rec your-demo${NC} (overwrites)

EOF
}

ascii_list() {
    log_header "${EMOJI_CAMERA} Available Recordings"
    
    local found=0
    
    # List casts in current directory
    if compgen -G "*.cast" > /dev/null; then
        echo "${BOLD}Current directory:${NC}"
        for cast in *.cast; do
            if [[ -f "$cast" ]]; then
                local size=$(du -h "$cast" | cut -f1)
                local date=$(date -r "$cast" "+%Y-%m-%d %H:%M" 2>/dev/null || stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$cast" 2>/dev/null || echo "unknown")
                echo "  ${GREEN}‚Ä¢${NC} $cast  ${CYAN}($size, $date)${NC}"
                found=1
            fi
        done
        echo ""
    fi
    
    # List casts in demos directory
    if [[ -d "$DEMOS_DIR" ]] && compgen -G "$DEMOS_DIR/*.cast" > /dev/null; then
        echo "${BOLD}$DEMOS_DIR directory:${NC}"
        for cast in "$DEMOS_DIR"/*.cast; do
            if [[ -f "$cast" ]]; then
                local basename=$(basename "$cast")
                local size=$(du -h "$cast" | cut -f1)
                local date=$(date -r "$cast" "+%Y-%m-%d %H:%M" 2>/dev/null || stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$cast" 2>/dev/null || echo "unknown")
                echo "  ${GREEN}‚Ä¢${NC} $basename  ${CYAN}($size, $date)${NC}"
                found=1
            fi
        done
        echo ""
    fi
    
    if [[ $found -eq 0 ]]; then
        log_info "No recordings found"
        echo ""
        log_info "Create one with: ${CYAN}init.sh rec my-demo${NC}"
        echo ""
    else
        log_info "Play a recording: ${CYAN}init.sh play <filename>${NC}"
        log_info "Upload a recording: ${CYAN}init.sh upload <filename>${NC}"
        echo ""
    fi
}

# =====================================================
# PROJECT INITIALIZATION FUNCTIONS  
# =====================================================

# Create directory structure
create_structure() {
    local project_dir="$1"
    local template="$2"
    
    log_info "Creating project structure..."
    
    # Create base directories
    mkdir -p "$project_dir"/{src,lib,examples,tests,docs,demos,.arty/{bin,libs}}
    
    # Template-specific directories
    case "$template" in
        web)
            mkdir -p "$project_dir"/{public,routes,middleware}
            ;;
        cli)
            mkdir -p "$project_dir"/{cmd,internal}
            ;;
        lib)
            mkdir -p "$project_dir"/{modules,utils}
            ;;
    esac
    
    log_success "Project structure created"
}

# Generate arty.yml
generate_arty_yml() {
    local project_dir="$1"
    local project_name="$2"
    local template="$3"
    
    log_info "Generating arty.yml..."
    
    local main_script="index.sh"
    case "$template" in
        cli) main_script="cmd/main.sh" ;;
        lib) main_script="lib/index.sh" ;;
        web) main_script="server.sh" ;;
    esac
    
    cat > "$project_dir/arty.yml" << EOF
name: "${project_name}"
version: "0.1.0"
description: "A new arty.sh project"
author: "$(git config user.name 2>/dev/null || echo '')"
license: "MIT"

# Project type: basic, cli, lib, web
type: "${template}"

# Dependencies from other arty.sh repositories
references:
  # Add your dependencies here
  # - https://github.com/user/bash-utils.git

# Entry point script
main: "${main_script}"

# Available commands/scripts
scripts:
  start: "bash ${main_script}"
  test: "bash tests/run-tests.sh"
  build: "bash scripts/build.sh"
  lint: "shellcheck src/**/*.sh"
  docs: "leaf.sh . -o docs"
  clean: "rm -rf build/ dist/"
  
  # Demo recording scripts
  demo-rec: "init.sh rec \${DEMO_NAME:-demo}"
  demo-play: "init.sh play \${DEMO_FILE}"
  demo-upload: "init.sh upload \${DEMO_FILE}"
  demo-list: "init.sh list"

# Environment variables
env:
  DEBUG: "0"
  LOG_LEVEL: "info"

# Project metadata
repository: ""
homepage: ""
bugs: ""

# Build configuration
build:
  output: "dist"
  target: "bash"
EOF

    log_success "Generated arty.yml (with asciinema commands!)"
}

# Generate README
generate_readme() {
    local project_dir="$1"
    local project_name="$2"
    local template="$3"
    
    log_info "Generating README.md..."
    
    cat > "$project_dir/README.md" << EOF
# ${project_name}

> A modern bash project powered by arty.sh

## üöÄ Quick Start

\`\`\`bash
# Install dependencies
arty deps

# Run the project
arty start

# Run tests
arty test
\`\`\`

## üé¨ Demo

<!-- Add your asciinema demo here -->
<!-- Record with: init.sh rec my-demo -->
<!-- Upload and replace YOUR-ID below -->

<a href="https://asciinema.org/a/YOUR-ID" target="_blank">
  <img src="https://asciinema.org/a/YOUR-ID.svg" width="600"/>
</a>

### Recording Demos

\`\`\`bash
# Start recording
init.sh rec my-demo

# Play it back
init.sh play my-demo.cast

# Upload to asciinema.org
init.sh upload my-demo.cast

# List all recordings
init.sh list
\`\`\`

## üì¶ Installation

\`\`\`bash
# Clone the repository
git clone https://github.com/yourusername/${project_name}.git
cd ${project_name}

# Install with arty
arty install
\`\`\`

## üõ†Ô∏è Development

\`\`\`bash
# Run in development mode
bash index.sh

# Run tests
bash tests/run-tests.sh

# Generate documentation
arty docs
\`\`\`

## üìñ Documentation

Project documentation is automatically generated using leaf.sh:

\`\`\`bash
arty docs
open docs/index.html
\`\`\`

## üèóÔ∏è Project Structure

\`\`\`
${project_name}/
‚îú‚îÄ‚îÄ arty.yml          # Project configuration
‚îú‚îÄ‚îÄ README.md         # This file
‚îú‚îÄ‚îÄ LICENSE           # MIT License
‚îú‚îÄ‚îÄ .gitignore        # Git ignore rules
‚îú‚îÄ‚îÄ index.sh          # Main entry point
‚îú‚îÄ‚îÄ src/              # Source files
‚îú‚îÄ‚îÄ lib/              # Libraries
‚îú‚îÄ‚îÄ examples/         # Example scripts
‚îú‚îÄ‚îÄ tests/            # Test files
‚îú‚îÄ‚îÄ docs/             # Documentation
‚îú‚îÄ‚îÄ demos/            # asciinema recordings
‚îî‚îÄ‚îÄ .arty/            # arty.sh workspace
    ‚îú‚îÄ‚îÄ bin/          # Linked executables
    ‚îî‚îÄ‚îÄ libs/         # Dependencies
\`\`\`

## üéØ Features

- ‚ú® Modern bash development
- üì¶ Dependency management with arty.sh
- üß™ Built-in testing framework
- üìö Auto-generated documentation
- üîß Configuration via arty.yml
- üé¨ Demo recording with asciinema
- üöÄ Ready for distribution

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## üìÑ License

MIT License - see LICENSE file for details

## üîó Links

- [arty.sh](https://github.com/butter-sh/arty.sh) - Library manager
- [leaf.sh](https://github.com/butter-sh/leaf.sh) - Documentation generator
- [hammer.sh](https://github.com/butter-sh/hammer.sh) - Project generator
- [asciinema](https://asciinema.org) - Terminal recording

---

Made with ‚ù§Ô∏è using the butter.sh ecosystem
EOF

    log_success "Generated README.md (with asciinema section!)"
}

# [Rest of the init functions remain the same - generate_main_script, generate_tests, etc.]
# ... (keeping the file under token limits - these functions are unchanged)

# Main entry point
main() {
    # Handle asciinema commands first (before banner for cleaner output)
    if [[ $# -gt 0 ]]; then
        case $1 in
            rec|record)
                shift
                ascii_record "$@"
                exit 0
                ;;
            play)
                shift
                ascii_play "$@"
                exit 0
                ;;
            upload)
                shift
                ascii_upload "$@"
                exit 0
                ;;
            stop)
                ascii_stop
                exit 0
                ;;
            list|ls)
                ascii_list
                exit 0
                ;;
        esac
    fi
    
    show_banner
    
    # Handle other commands
    if [[ $# -gt 0 ]]; then
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            --version)
                show_version
                exit 0
                ;;
        esac
    fi
    
    # Check dependencies for project init
    if ! check_dependencies; then
        log_error "Missing required dependencies"
        exit 1
    fi
    
    # Parse arguments for project initialization
    # ... (rest of project init logic)
}

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
